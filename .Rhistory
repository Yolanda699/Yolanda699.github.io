mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = -0.5, size = 1) +  # Add percentage labels
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = -0.5, size = 2) +  # Add percentage labels
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 2) +  # Add percentage labels
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 2, color="black") +  # Add percentage labels
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 3, color = "black", bg = "yellow", show.legend = FALSE) +  # Add percentage labels with background color
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 2, color = "black", bg = "yellow", show.legend = FALSE) +  # Add percentage labels with background color
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 2, color = "black", bg = "yellow") +  # Add percentage labels with background color
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggtext)
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.7, size = 2, color = "black") +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 2, color = "black") +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = 0.5, size = 3, color = "black") +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = -0.5, size = 3, color = "black") +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
geom_text(aes(label = paste0(round(percentage), "%")), vjust = -0.2, size = 3, color = "black") +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_alcohol_counts <- drug_or %>%
group_by(Country, Alcohol) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_alcohol_counts$Country <- factor(country_alcohol_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_alcohol_counts, aes(x = Country, y = percentage, color = Alcohol, group = Alcohol)) +
geom_line() +
geom_point() +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Alcohol Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(ggplot2)
library(dplyr)
country_caff_counts <- drug_or %>%
group_by(Country, Caff) %>%
summarise(count = n(), .groups = 'drop') %>%
group_by(Country) %>%
mutate(percentage = count / sum(count) * 100)
country_caff_counts$Country <- factor(country_caff_counts$Country)
custom_colours <- c("#aed0ee", "#a3bbdb", "#88abda", "#8aabcc", "#6f94cd", "#5976ba", "#106898", "#12507b", "#003460")
ggplot(country_caff_counts, aes(x = Country, y = percentage, color = Caff, group = Caff)) +
geom_line() +
geom_point() +
scale_color_manual(values = custom_colours, name = "Consumption Level") +
theme_minimal() +
theme(
legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels for better readability
) +
labs(title = "Country and Caffeine Consumption",
x = "Countries of origin",
y = "Percentage",
color = "Consumption Level")
library(shiny)
library(shiny)
# Define UI for feedback submission
feedback_ui <- fluidPage(
textAreaInput("feedback", label = "Feedback:", placeholder = "Enter your feedback here..."),
actionButton("submit", "Submit Feedback")
)
# Define server logic
feedback_server <- function(input, output) {
observeEvent(input$submit, {
# Get feedback input
feedback_text <- isolate(input$feedback)
# Do something with the feedback (e.g., store in a file or database)
# For demonstration, we'll print it here
print(feedback_text)
# Display a confirmation message
showModal(modalDialog(
title = "Feedback Submitted",
"Thank you for your feedback!",
footer = NULL
))
})
}
# Create Shiny app object
feedback_app <- shinyApp(ui = feedback_ui, server = feedback_server)
# Run the app
feedback_app
library(shiny)
# Define UI for feedback submission
feedback_ui <- fluidPage(
textAreaInput("feedback", label = "Feedback:", placeholder = "Enter your feedback here..."),
actionButton("submit", "Submit Feedback")
)
# Define server logic
feedback_server <- function(input, output) {
observeEvent(input$submit, {
# Get feedback input
feedback_text <- isolate(input$feedback)
# Do something with the feedback (e.g., store in a file or database)
# For demonstration, we'll print it here
print(feedback_text)
# Display a confirmation message
showModal(modalDialog(
title = "Feedback Submitted",
"Thank you for your feedback!",
footer = NULL
))
})
}
# Create Shiny app object
feedback_app <- shinyApp(ui = feedback_ui, server = feedback_server)
# Run the app
feedback_app
source("~/Desktop/NUS/NUS Y2S2/NM2207/NM2207 Project/Yolanda699.github.io/app2/app2.R")
source("~/Desktop/NUS/NUS Y2S2/NM2207/NM2207 Project/Yolanda699.github.io/app2/app2.R")
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
runApp('app2/app2.R')
library(shiny); runApp('app2/app2.R')
library(shiny)
# 定义全局变量
carbon_coverage <- 0
# 创建UI界面
ui <- fluidPage(
titlePanel("发动机积碳清理游戏"),
sidebarLayout(
sidebarPanel(
actionButton("clean_button", "使用净擎因子清理积碳")
),
mainPanel(
plotOutput("carbon_plot")
)
)
)
# 创建服务器逻辑
server <- function(input, output, session) {
# 更新积碳覆盖率
observe({
carbon_coverage <<- carbon_coverage + 0.1 # 每次更新增加0.1
if (carbon_coverage >= 60) {
stopApp() # 结束游戏
}
})
# 清理积碳按钮事件
observeEvent(input$clean_button, {
carbon_coverage <<- carbon_coverage - 10 # 清理积碳，覆盖率减少10%
if (carbon_coverage < 0) {
carbon_coverage <<- 0 # 确保积碳覆盖率不小于0
}
})
# 绘制图表
output$carbon_plot <- renderPlot({
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, 1),
xlab = "", ylab = "", main = "发动机积碳清理游戏")
text(0.5, 0.5, paste("积碳覆盖率:", round(carbon_coverage, 1), "%"), cex = 2)
})
}
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
# 定义全局变量
carbon_coverage <- 0
carbon_x <- runif(1, 0, 1) # 初始积碳的 x 坐标
carbon_y <- runif(1, 0, 1) # 初始积碳的 y 坐标
# 创建UI界面
ui <- fluidPage(
titlePanel("发动机积碳清理游戏"),
sidebarLayout(
sidebarPanel(
# 空白
),
mainPanel(
plotOutput("carbon_plot", click = "click_event")
)
)
)
# 创建服务器逻辑
server <- function(input, output, session) {
# 清理积碳
observeEvent(input$click_event, {
click_x <- input$click_event$x
click_y <- input$click_event$y
distance <- sqrt((click_x - carbon_x)^2 + (click_y - carbon_y)^2)
if (distance < 0.03) { # 如果点击距离积碳小于半径的0.03，视为清理成功
carbon_coverage <<- carbon_coverage - 10 # 清理积碳，覆盖率减少10%
if (carbon_coverage < 0) {
carbon_coverage <<- 0 # 确保积碳覆盖率不小于0
}
# 随机生成新的积碳位置
carbon_x <<- runif(1, 0, 1)
carbon_y <<- runif(1, 0, 1)
}
})
# 绘制图表
output$carbon_plot <- renderPlot({
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, 1),
xlab = "", ylab = "", main = "发动机积碳清理游戏")
points(carbon_x, carbon_y, pch = 16, col = "black", cex = 3) # 绘制积碳
text(0.5, 0.5, paste("积碳覆盖率:", round(carbon_coverage, 1), "%"), cex = 2)
})
}
# 运行应用
shinyApp(ui = ui, server = server)
library(shiny)
# 定义全局变量
carbon_coverage <- 0
carbon_x <- runif(1, 0, 1) # 初始积碳的 x 坐标
carbon_y <- runif(1, 0, 1) # 初始积碳的 y 坐标
speed <- 0.001 # 初始速度
# 创建UI界面
ui <- fluidPage(
titlePanel("发动机积碳清理游戏"),
sidebarLayout(
sidebarPanel(
# 空白
),
mainPanel(
plotOutput("carbon_plot", click = "click_event")
)
)
)
# 创建服务器逻辑
server <- function(input, output, session) {
# 清理积碳
observeEvent(input$click_event, {
click_x <- input$click_event$x
click_y <- input$click_event$y
distance <- sqrt((click_x - carbon_x)^2 + (click_y - carbon_y)^2)
if (distance < 0.03) { # 如果点击距离积碳小于半径的0.03，视为清理成功
carbon_coverage <<- carbon_coverage - 10 # 清理积碳，覆盖率减少10%
if (carbon_coverage < 0) {
carbon_coverage <<- 0 # 确保积碳覆盖率不小于0
}
# 随机生成新的积碳位置
carbon_x <<- runif(1, 0, 1)
carbon_y <<- runif(1, 0, 1)
}
})
# 更新积碳位置和速度
observe({
invalidateLater(10) # 每10毫秒更新一次
carbon_x <<- carbon_x + speed * runif(1, -1, 1) # 随机更新 x 坐标
carbon_y <<- carbon_y + speed * runif(1, -1, 1) # 随机更新 y 坐标
# 确保积碳在界面内
carbon_x <<- pmax(pmin(carbon_x, 1), 0)
carbon_y <<- pmax(pmin(carbon_y, 1), 0)
# 更新速度
speed <<- speed + 0.00001 # 每次更新速度增加0.00001
})
# 绘制图表
output$carbon_plot <- renderPlot({
plot(1, type = "n", xlim = c(0, 1), ylim = c(0, 1),
xlab = "", ylab = "", main = "发动机积碳清理游戏")
points(carbon_x, carbon_y, pch = 16, col = "black", cex = 3) # 绘制积碳
text(0.5, 0.5, paste("积碳覆盖率:", round(carbon_coverage, 1), "%"), cex = 2)
})
}
# 运行应用
shinyApp(ui = ui, server = server)
runApp('~/Desktop/积碳游戏.R')
runApp('~/Desktop/积碳游戏.R')
runApp('~/Desktop/积碳游戏.R')
library(shiny); runApp('app3/app3.R')
runApp('app3/app3.R')
